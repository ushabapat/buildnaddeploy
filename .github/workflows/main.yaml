name: .NET Build and Deploy

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/core/sdk:3.1

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1'  # Set this to the .NET Core version you need
    # - name: Install ICU Libraries
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y libicu-dev
    #     sudo apt-get install -y libssl-dev

    - name: Set DOTNET_SYSTEM_GLOBALIZATION_INVARIANT
      run: echo "DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1" >> $GITHUB_ENV

    - name: Create /app directory and change ownership
      run: |
        mkdir -p /App
        chown $USER:$USER /App

    - name: Change to /app directory
      run: cd /App

    - name: List contents of the App directory
      run: ls -la App/

    - name: Restore dependencies
      run: dotnet restore App/DotNet.Docker.csproj

    # - name: Build with SonarQube analysis
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   run: |
    #     # Optionally install SonarScanner for .NET if not already included in your project
    #     dotnet tool install --global dotnet-sonarscanner
    #     dotnet sonarscanner begin /k:"project-key" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN"
    #     dotnet build
    #     dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

    - name: Build Docker image
      run: docker build -t myapp:${{ github.sha }} -f App/Dockerfile .

    - name: Scan the Docker image with Trivy
      run: |
        docker save myapp:${{ github.sha }} -o image.tar
        trivy image --input image.tar

    - name: Log in to Artifactory
      run: docker login -u ${{ secrets.ARTIFACTORY_USERNAME }} -p ${{ secrets.ARTIFACTORY_PASSWORD }} ${{ secrets.ARTIFACTORY_URL }}

    - name: Push Docker image to Artifactory
      run: docker push ${{ secrets.ARTIFACTORY_URL }}/myapp:${{ github.sha }}

    - name: Clone the IAAC repository
      uses: actions/checkout@v2
      with:
        repository: ushabapat/IAAC
        token: ${{ secrets.IAAC_REPO_TOKEN }}
        path: IAAC-repo
    
    - name: Update image tag in Helm chart values.yaml file
      run: |
        # Navigate to the Helm chart directory where values.yaml is located
        cd IAAC-repo/nging-chart
        # Update the image tag in values.yaml
        sed -i 's|tag: "stable"|tag: "${{ github.sha }}"|' values.yaml
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add values.yaml
        git commit -m "Update image tag to ${{ github.sha }}"
        git push

    - name: Trigger Argo CD (optional)
      run: |
        # You can trigger Argo CD using its CLI or API. This is an example using curl to call the Argo CD API.
        curl -X POST ${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nginx/sync \
          -H 'Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}' \
          -H 'Content-Type: application/json' \
          --data '{"revision": "${{ github.sha }}"}'
